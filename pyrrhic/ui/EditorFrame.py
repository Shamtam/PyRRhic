#   Copyright (C) 2020  Shamit Som <shamitsom@gmail.com>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published
#   by the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.

import logging
import os
import wx

from pubsub import pub
from wx import aui

from ..common.enums import UserLevel
from .base import bEditorFrame
from .TablePanel import TablePanel
from .PrefsDialog import PrefsDialog

_logger = logging.getLogger(__name__)

_rom_wildcard = 'Binary ROM Image (*.hex; *.bin)|*.hex;*.bin|All Files|*.*'

class EditorFrame(bEditorFrame):
    def __init__(self, parent, controller):
        super(EditorFrame, self).__init__(parent)
        self._controller = controller
        self._tree_panel.initialize()

        # TODO: eliminate reuse of status stuff between different frames
        self._status_timer = wx.Timer(self)
        self._temp_status_delay = 3000 # ms
        self.Bind(
            wx.EVT_TIMER, self._pop_status, self._status_timer
        )

        pub.subscribe(self._enable_livetune, 'editor.livetune.enable')
        pub.subscribe(self.OnTogglePane, 'editor.toggle_panel')
        pub.subscribe(self.refresh_tree, 'editor.table.rom.change')

        self._save_items = [
            self._mi_save, self._mi_save_as, self._tb_save, self._tb_save_as
        ]

        self.refresh_tree()

    def __del__(self):
        # need to override this function (auto-generated by wxFormBuilder)
        # to avoid exception being thrown on close due to AUI manager deletion
        pass

    def _enable_livetune(self, livetune=None):
        userlvl = self._controller.Preferences['UserLevel'].Value

        enable = livetune is not None

        # only allow livetune UI for superdev user level
        if userlvl < UserLevel.Superdev:
            enable = False

        self._mi_view_livetune.Enable(enable)

        if enable:
            self._livetune_panel.initialize(livetune)

        # uninitialize and hide livetune pane if it's already shown
        else:
            self._livetune_panel.initialize()
            pane = self.m_mgr.GetPane(self._livetune_panel)
            if pane.IsShown():
                pane.Show(False)
                self.m_mgr.Update()

    def toggle_table(self, table):

        if table.Panel is not None:
            pane = self.m_mgr.GetPane(table.Panel)
            pane.Show(not pane.IsShown())
            self.m_mgr.Update()

            # need to re-set max size every time pane is shown
            table.Panel.Parent.SetMaxClientSize(table.Panel.GetMaxSize())

        else:
            pane_name = table.PanelTitle
            p = TablePanel(self, pane_name, table)
            table.Panel = p
            start_pos = self.GetScreenPosition()

            # calculate pane (not panel) total size
            scr_x = wx.SystemSettings.GetMetric(wx.SYS_VSCROLL_X)
            scr_y = wx.SystemSettings.GetMetric(wx.SYS_HSCROLL_Y)
            max_size = (p.GetSize()[0], p.GetSize()[1])

            self.m_mgr.AddPane(
                p,
                wx.aui.AuiPaneInfo()
                    .Name(pane_name)
                    .Caption(pane_name)
                    .CloseButton()
                    .PaneBorder()
                    .Float()
                    .Resizable()
                    .FloatingPosition(start_pos)
                    .Show()
            )
            self.m_mgr.Update()

            # need to set the AUIFloatingPane max size here, since the
            # aui.AuiPaneInfo.MaxSize() approach doesn't seem to work
            p.Parent.SetClientSize(max_size)
            p.Parent.SetMaxClientSize(max_size)

    def refresh_tree(self, obj=None):
        for item in self._save_items:
            enabled = bool(self._controller.ModifiedROMs)
            if isinstance(item, wx.MenuItem):
                item.Enable(enabled)
            elif isinstance(item, aui.AuiToolBarItem):
                item.SetState(
                    aui.AUI_BUTTON_STATE_NORMAL if enabled
                    else aui.AUI_BUTTON_STATE_DISABLED
                )
            self.Refresh()

    def push_status(self, msg, temporary=True):
        "Push text to the status bar."

        if isinstance(msg, str):
            self._status_bar.PushStatusText(msg)
            if temporary:
                self._status_timer.StartOnce(self._temp_status_delay)

    def _pop_status(self, event=None):
        self._status_bar.PopStatusText()

    def OnClose(self, event):
        self._controller.save_prefs()
        self.m_mgr.UnInit()
        event.Skip()

    def OnOpenRom(self, event):
        if not self._controller.DefsValid:
            self.warning_box(
                'No Definitions Loaded',
                'No definitions loaded! Ensure definition paths are correct',
            )
            return

        dlg = wx.FileDialog(
            self,
            'Open ROM File',
            wildcard=_rom_wildcard,
            style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_MULTIPLE
        )
        result = dlg.ShowModal()

        if result == wx.ID_OK:
            fpaths = dlg.GetPaths()

            for fpath in fpaths:
                # TODO: sanity check files here?
                self._controller.open_rom(fpath)

            pub.sendMessage('editor.table.rom.change')

    def OnSaveRom(self, event):

        # TODO: show dialog allowing user to select which ROMs to save

        num_saved = 0
        for rom in self._controller.ModifiedROMs.values():
            rom.save()
            num_saved += 1

        if num_saved:
            self.push_status('Saved {} ROMs'.format(num_saved))
            self.refresh_tree()

    def OnSaveRomAs(self, event):

        # TODO: show dialog allowing user to select which ROMs to save

        num_saved = 0
        for rom in self._controller.ModifiedROMs.values():
            start_path = os.path.dirname(rom.Path)
            start_fname = os.path.basename(rom.Path)
            with wx.FileDialog(
                self,
                'Save ROM {}'.format(start_fname),
                defaultDir=start_path,
                defaultFile=start_fname,
                wildcard=_rom_wildcard,
                style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            ) as dlg:

                result = dlg.ShowModal()
                if result == wx.ID_OK:
                    rom.save(dlg.GetPath())
                    num_saved += 1

        if num_saved:
            self.push_status('Saved {} ROMs'.format(num_saved))
            self.refresh_tree()

    def OnPreferences(self, event):
        dlg = PrefsDialog(self, self._controller.Preferences)
        dlg.ShowModal()
        dlg.Destroy()

    def OnTogglePane(self, event=None):

        # determine which pane to toggle

        # menu item was clicked
        if event.GetEventType() == wx.wxEVT_MENU:
            _id_map = {
                self._mi_view_romdata.GetId(): self._tree_panel,
                self._mi_view_console.GetId(): self._console_panel,
                self._mi_view_livetune.GetId(): self._livetune_panel,
            }
            pane = self.m_mgr.GetPane(_id_map[event.GetId()])

        # close button on pane itself was clicked
        elif event.GetEventType() == aui.wxEVT_AUI_PANE_CLOSE:
            pane = event.GetPane()

        # shouldn't ever reach here... do nothing if so
        else:
            return

        # toggle pane
        pane.Show(not pane.IsShown())

        # update menu item state
        _menu_map = {
            self._tree_panel: self._mi_view_romdata,
            self._console_panel: self._mi_view_console,
            self._livetune_panel: self._mi_view_livetune,
        }
        if pane.window in _menu_map:
            _menu_map[pane.window].Check(pane.IsShown())

        # commit changes to AUI manager
        self.m_mgr.Update()

    @property
    def Controller(self):
        return self._controller

    @property
    def ConsolePane(self):
        return self._console_panel

    @property
    def ROMTreePane(self):
        return self._tree_panel

    @property
    def LiveTunePane(self):
        return self._livetune_panel
